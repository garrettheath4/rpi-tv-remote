{"version":3,"sources":["RemoteButton.jsx","App.js","registerServiceWorker.js","index.js"],"names":["RemoteButton","props","handleClick","bind","console","log","this","url","xhttp","XMLHttpRequest","open","send","type","className","onClick","label","Component","App","style","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4MAEqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,YAAc,EAAKA,YAAYC,KAAjB,gBAJF,E,0DAQjBC,QAAQC,IAAI,QAAUC,KAAKL,MAAMM,KACjC,IAAIC,EAAQ,IAAIC,eAChBD,EAAME,KAAK,OAAQJ,KAAKL,MAAMM,KAC9BC,EAAMG,S,+BAIN,OACE,4BAAQC,KAAK,SAASC,UAAU,kCAAkCC,QAASR,KAAKJ,aAC9E,4BAAKI,KAAKL,MAAMc,Y,GAlBkBC,aC6B3BC,E,uKAzBX,OACE,yBAAKC,MAAO,CAACC,OAAQ,UACnB,yBAAKN,UAAU,yBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAcN,IAAI,yBAAyBQ,MAAM,gBAEnD,yBAAKF,UAAU,gBACb,kBAAC,EAAD,CAAcN,IAAI,kBAAkBQ,MAAM,kBAG9C,yBAAKF,UAAU,YACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAcN,IAAI,0BAA0BQ,MAAM,yBAEpD,yBAAKF,UAAU,gBACb,kBAAC,EAAD,CAAcN,IAAI,yBAAyBQ,MAAM,gC,GAnB7CC,aCOZI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BlC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBkC,OAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,iBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,iBAAN,sBAEP1B,IAiDV,SAAiCO,GAE/BsB,MAAMtB,GACHI,MAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BT,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBY,OAAM,WACLnC,QAAQC,IACN,oEArEAqD,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjC3B,QAAQC,IACN,gHAMJqB,EAAgBC,OCzCxBgC,I","file":"static/js/main.d53a7513.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class RemoteButton extends Component {\n  constructor(props) {\n    super(props);\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    console.log(\"POST \" + this.props.url);\n    var xhttp = new XMLHttpRequest();\n    xhttp.open(\"POST\", this.props.url);\n    xhttp.send();\n  }\n\n  render() {\n    return (\n      <button type=\"button\" className=\"btn btn-primary btn-block h-100\" onClick={this.handleClick}>\n        <h3>{this.props.label}</h3>\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport RemoteButton from './RemoteButton'\n\nclass App extends Component {\n  render() {\n    // Raspberry Pi touchscreen resolution is 800 x 480\n    return (\n      <div style={{height: '480px'}}>\n        <div className=\"container-fluid h-100\">\n          <div className=\"row h-50\">\n            <div className=\"col-sm-6 p-3\">\n              <RemoteButton url=\"/api/source/chromecast\" label=\"Chromecast\"/>\n            </div>\n            <div className=\"col-sm-6 p-3\">\n              <RemoteButton url=\"/api/source/rpi\" label=\"News Stream\"/>\n            </div>\n          </div>\n          <div className=\"row h-50\">\n            <div className=\"col-sm-6 p-3\">\n              <RemoteButton url=\"/api/source/rpi/refresh\" label=\"Refresh News Stream\"/>\n            </div>\n            <div className=\"col-sm-6 p-3\">\n              <RemoteButton url=\"/api/source/rpi/reboot\" label=\"Reboot Raspberry Pi\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}